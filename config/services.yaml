# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.
# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.
# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'fr'
    app.path.event_images: /uploads/images
    map_box_token: pk.eyJ1IjoiZnJhbmNlLWJlbm9pdC1sNG0iLCJhIjoiY2pubXdkaWYxMXUxczNrbzNmM3U2MmxoYSJ9.1iexbLDOjG2QC8VBZAYt3g
    token: ZmU1MTgxNzNkZjM5ZTU2NzdiODVkODgxMmE2ZmE2OWUyMjY1ZWIxYzgxMjdlOTA3NjBiOD
    client_id: 3_4q3qcd3g1rmsw0s0ckcs4wk0wksg4gwk40sgcwscso00coo8wc
    client_secret: 52tm7pb54h0k0koo44okgkso48g4woscgsw00k8wow0c8kkooc
    base_url: 'https://www.24h-emploi.com'
    admin_online: '2018-08-29'
    router.request_context.host: 'www.24h-emploi.com'
    router.request_context.scheme: 'https'
    router.request_context.base_url: ''
    asset.request_context.base_path: '%router.request_context.base_url%'
    asset.request_context.secure: true
    public_dir: '%kernel.project_dir%/public'
    main_host: 'www.24h-emploi.com'
    maintenance:
        statut: false
        ipAuthorized: ["::1","192.168.0.202"]

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false    # Allows optimizing the container by removing unused services; this also means
          # fetching services directly from the container via $container->get() won't work.
        # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name

    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
            - '../src/Serializer/'
    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Helper\:
        resource: '../src/Helper'
        public: true

    App\Filter\:
        resource: '../src/Filter'
        public: true

    App\Helper\RenderHelper:
        arguments:
            $project_dir: '%kernel.project_dir%'

    App\Helper\TwigHelper:
        arguments:
            $project_dir: '%kernel.project_dir%'

    App\Helper\FormHelper:
        arguments:
            $project_dir: '%kernel.project_dir%'

    App\Helper\MailerHelper:
        arguments:
            $admin_online: '%admin_online%'
            $public_dir: '%public_dir%'

    App\Factory\:
        resource: '../src/Factory'
        public: true
    App\Command\:
        resource: '../src/Command'
        public: true

    App\Command\MissingInvitationCommand:
        arguments:
            $project_dir: '%kernel.project_dir%'

    App\Command\FixCvCommand:
        arguments:
            $public_dir: '%public_dir%'

    App\Command\EventRecallCommand:

    App\EventListener\:
        resource: '../src/EventListener'
        public: true

    App\EventListener\MaintenanceListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }
        arguments: ['%maintenance%']

    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    App\EventListener\PlaceListener:
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }
        arguments:
            $token: '%map_box_token%'
            $env: '%kernel.environment%'

    App\EventListener\SlugGenerator:
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }

    App\EventListener\SendinblueListener:
        tags:
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: postUpdate }
            - { name: doctrine.event_listener, event: postRemove }
            - { name: doctrine.event_listener, event: postFlush }

    App\EventListener\RemoveFilesListener:
        tags:
            - { name: doctrine.event_listener, event: postRemove }
        arguments:
            $public_dir: '%public_dir%'

    App\EventListener\ParticipationListener:
        tags:
            - { name: doctrine.event_listener, event: preRemove }

    App\EventListener\DeserializeListener:
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.request', method: 'onKernelRequest', priority: 2 }
        # Autoconfiguration must be disabled to set a custom priority
        autoconfigure: false
        decorates: 'api_platform.listener.request.deserialize'
        arguments:
            $decorated: '@App\EventListener\DeserializeListener.inner'

    # App\EventListener\EventSubscriber:
    #     tags:
    #         - { name: doctrine.event_subscriber, connection: default }
    #         WARNING cannot inject $em from H48helper
    #         doent work neither with listener

    App\EventListener\TimestampListener:
        tags:
            - { name: doctrine.event_listener, event: onFlush }
            - { name: doctrine.event_listener, event: prePersist }

    App\EventListener\OrganizationListener:
        arguments: ['@security.password_hasher' ]
        tags:
            - { name: doctrine.event_listener, event: onFlush }

    App\EventListener\UrlChecker:
        arguments: ['@security.password_hasher' ]
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }

    App\EventListener\PasswordListener:
        tags:
            - { name: doctrine.event_listener, event: prePersist }

    App\EventListener\OauthUserResolveListener:
        tags:
            - { name: kernel.event_listener, event: league.oauth2_server.event.user_resolve, method: onUserResolve}
            
    App\EventListener\AuthentificationListener:
        tags:
            - { name: kernel.event_listener, event: security.authentication.success, method: onAuthenticationSuccess}
            
    App\EventListener\ResponseListener:
        tags:
            - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse}

    monolog.formatter.session_request:
        class: Monolog\Formatter\LineFormatter
        arguments:
            - "[%%datetime%%] [%%extra.token%%] %%channel%%.%%level_name%%: %%message%% %%context%% %%extra%%\n"

    App\Logger\SessionRequestProcessor:
        tags:
            - { name: monolog.processor, method: processRecord}

    App\Helper\ImageHelper:
        public: true

    App\Helper\ImageFolderHelper:
        public: true
        arguments:
            $public_dir: '%kernel.project_dir%/public'

    App\EventSubscriber\UploadSubscriber:
        public: true
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    easycorp.easylog.handler:
        class: EasyCorp\EasyLog\EasyLogHandler
        public: false
        arguments:
            - '%kernel.logs_dir%/%kernel.environment%.log'

    sensio_framework_extra.view.listener:
        alias: Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener

    remove.helper:
        alias: App\Helper\RemoveHelper

    twig.helper:
        alias: App\Helper\TwigHelper

    h48.helper:
        alias: App\Helper\H48Helper
