<?php

namespace App\Repository;

use App\Entity\Candidate;
use App\Entity\Event;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * CandidateRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CandidateRepository extends ServiceEntityRepository
{
	public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Candidate::class);
    }

    public function findByEvent(Event $event)
    {
        return $this->createQueryBuilder('c')
        	->join('c.event', 'e')
            ->where('e.id = :id')
            ->setParameter('id', $event->getId())
            ->orderBy('c.lastname', 'ASC')
            ->getQuery()
            ->getResult()
        ;
    }

    public function findPhoneRecall(Event $event)
    {
        return $this->createQueryBuilder('c')
            ->select('c.phone')
            ->join('c.event', 'e')
            ->where('e.id = :id')
            ->andWhere('c.phoneRecall = true')
            ->setParameter('id', $event->getId())
            ->getQuery()
            ->getResult()
        ;
    }

		

    public function findRecallByEvent(Event $event)
    {
        return $this->createQueryBuilder('c')
            ->join('c.event', 'e')
            ->where('e.id = :id')
            ->andWhere('c.mailingRecall = true')
            ->setParameter('id', $event->getId())
            ->orderBy('c.lastname', 'ASC')
            ->getQuery()
            ->getResult()
        ;
    }

    public function findByEventQuery(Event $event)
    {
        return $this->createQueryBuilder('c')
        	->join('c.event', 'e')
            ->where('e.id = :id')
            ->setParameter('id', $event->getId())
            ->orderBy('c.lastname', 'ASC')
            ->getQuery()
        ;
    }

    public function findByEventAndInputQuery(Event $event, $search)
    {
        return $this->createQueryBuilder('c')
            ->join('c.event', 'e')
            ->where('c.email like :search')
            ->orWhere('c.firstname like :search')
            ->orWhere('c.lastname like :search')
            ->orWhere('c.phone like :search')
            ->andWhere('e.id = :id')
            ->setParameters(array('id' => $event->getId(), 'search' => '%'.$search.'%'))
            ->orderBy('c.lastname', 'ASC')
            ->getQuery()
        ;
    }

    public function findForMailingNormandie(Event $event)
    {

        // $id = $event->getId();
        // $events = [74,75,77,78,79];
        // $key = array_search($id, $events);
        // unset($events[$key]);

         $qb = $this->createQueryBuilder('c') ;

        $qb2 = $this->createQueryBuilder('c2')
            ->select('c2.email')
            ->join('c2.event', 'e2')
            // ->where('e2.id in (:events)')
            ->where('e2.id = :id')
            ->getDql();

        return $qb
            ->select('c.lastname', 'c.firstname', 'c.email')
            ->join('c.event', 'e')
            ->where('e.id != :id')
            ->andWhere($qb->expr()->notin('c.email', $qb2))
            ->andWhere('c.mailingEvents = 1')
            ->andWhere('e.id < 80')
            ->andWhere('e.id != 78')
            ->setParameter('id', $event->getId())
            //->setParameter('events', $events)
            ->orderBy('c.lastname', 'ASC')
            ->getQuery()
            ->getResult()
        ;
    }

    public function findNoInvitationFutureEvents()
    {
        return $this->createQueryBuilder('c')
            ->join('c.event', 'e')
            ->where('e.date >= :now')
            ->andWhere('c.invitationPath is null')
            ->setParameter('now', new \DateTime())
            ->getQuery()
            ->getResult()
        ;
    }

   /*
    public function findBySomething($value)
    {
        return $this->createQueryBuilder('c')
            ->where('c.something = :value')->setParameter('value', $value)
            ->orderBy('c.id', 'ASC')
            ->setMaxResults(10)
            ->getQuery()
            ->getResult()
        ;
    }
    */
}
